#!/usr/bin/env ruby
require "fileutils"
require "digest/sha1"

DEST  = "#{ENV['HOME']}/Pictures/Workflow"
CORES = `grep ^processor /proc/cpuinfo | wc -l`.to_i

module Photoflow
  COPY_CONVERTER = lambda{ |src, dest| FileUtils.cp(src, dest) }
  CONVERTERS  = {
    "NEF" => [ 'jpg',
      lambda{ |src, dest| system('nice -n +9 ufraw-batch --overwrite --out-type=jpeg --output="%s" "%s"' % [dest, src]) } ],
    "JPG" => [ 'jpg', COPY_CONVERTER ],
    "MOV" => [ 'mov', COPY_CONVERTER ],
  }
  EXTENSIONS   = CONVERTERS.keys
  ORIGINAL     = "original"
  CONVERTED    = "converted"
  MOUNT_POINTS = ["/media"]

  def self.each_card(&blk)
    Dir["{#{MOUNT_POINTS.join(",")}}/*/DCIM"].map{ |path| path.sub(%r!/DCIM$!, "") }.uniq.each(&blk)
  end

  class Importer
    def initialize(source_root_dir, dest_root_dir)
      @source_root_dir = source_root_dir
      @dest_root_dir   = dest_root_dir
    end

    def import
      importable_files.each do |src|
        dest = destination_path(src)
        basename = File.basename(src)
        next if File.exist?(dest) && File.size(dest) == File.size(src)

        FileUtils.mkdir_p(File.dirname(dest))
        begin
          FileUtils.cp(src, dest + ".tmp")
          FileUtils.mv(dest + ".tmp", dest)
          $stderr.puts("Copied: #{basename}")
        rescue => err
          $stderr.puts("Error copying: #{basename}: #{err}")
        end
      end
    end

  private
    def destination_path(source_path)
      timestamp = File.mtime(source_path).strftime("%Y-%m-%d")
      File.join(@dest_root_dir, ORIGINAL, timestamp, File.basename(source_path))
    end

    def importable_files
      Dir[File.join(@source_root_dir, "**", "*.{#{EXTENSIONS.join(",")}}")].sort
    end
  end

  class BulkConverter
    def initialize(root_dir, core_number)
      @root_dir = root_dir
      @core_number = core_number
    end

    def convert
      while (files = convertible_files).any?
        files.each do |src|
          command = CONVERTERS[extension(src).upcase].last
          dest = dest_path(src)
          FileUtils.mkdir_p(File.dirname(dest))
          command.call(src, dest + ".tmp")
          FileUtils.mv(dest + ".tmp", dest)
          basename = File.basename(dest)
          $stderr.puts("Converted [#{@core_number}]: #{basename}")
        end
      end
    end

  private
    def convertible_files
      Dir[File.join(@root_dir, ORIGINAL, "*", "*.{#{EXTENSIONS.join(",")}}")].select{ |f|
        this_core?(f) && !File.exist?(dest_path(f))
      }.sort
    end

    def extension(path)
      path[/[^\.]+$/]
    end

    def dest_path(source_path)
      source_extension = extension(source_path)
      dest_extension   = CONVERTERS[source_extension.upcase].first

      dest_path_parts = source_path.split(File::SEPARATOR)
      dest_path_parts[-3] = CONVERTED
      dest_path_parts[-1] = File.basename(source_path, "." + source_extension) + "." + dest_extension

      dest_path_parts.join(File::SEPARATOR)
    end

    def this_core?(path)
      Digest::SHA1.hexdigest(path)[0,1].to_i(16) % CORES == @core_number
    end
  end
end

Thread.abort_on_exception = true
threads = []

Photoflow.each_card do |source|
  threads << Thread.new{
    Photoflow::Importer.new(source, DEST).import
  }
end

CORES.times do |core_number|
  threads << Thread.new{
    sleep 5 # Cheap hack to make sure that some pictures have been copied
    Photoflow::BulkConverter.new(DEST, core_number).convert
  }
end

threads.each do |t|
  t.join
end
